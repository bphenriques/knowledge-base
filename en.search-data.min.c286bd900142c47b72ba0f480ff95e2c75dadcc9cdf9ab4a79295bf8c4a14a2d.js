'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/knowledge-base/concurrency/actor-model/','title':"Actor Model",'content':" Referred in\n Lightbend Academy   In the context of Reactive Systems, Actor model is a reactive tool, a paradigm that:\n Message driven - All communication between actors is done with async non-blocking messages. Abstractions provide elasticity and resiliency.  Akka uses the actor model - https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html?language=scala\nFundamental  All computation occurs inside of the actor. Each actor has an address. Actors only communicate through asyncronous messages.  The message driven system provides location transparency, i.e., the technique remainins the same regardless of where the actors are. This allows better resiliency and elastic (hmm.. questions on this bit). This is different from \u0026ldquo;Transparent remoting\u0026rdquo; as this hides potential networking issues while making it seem like local calls. Location transparency makes the opposite which is makes local calls seem like remote calls, therefore whoever uses is aware that there are potential failures.\n"});index.add({'id':1,'href':'/knowledge-base/data-processing/apache-spark/','title':"Apache Spark",'content':"#ROAM_TAGS: data\nGlossary  RDD - Resilient Distributed Datasets  "});index.add({'id':2,'href':'/knowledge-base/monitoring/bug-management/','title':"Bug Management",'content':"Some personal notes on simplifying the process so that one can focus on getting back to the other tasks at hand.\nOn Reporting Bugs  Focus on the impact for the client. You do not need to debug right away. You do not need to establish the timeline - The report can solely include the context. The person assigned to the issue will pick on the context provided in the ticket and explore.  "});index.add({'id':3,'href':'/knowledge-base/concurrency/','title':"Concurrency",'content':""});index.add({'id':4,'href':'/knowledge-base/data-processing/','title':"Data Processing",'content':""});index.add({'id':5,'href':'/knowledge-base/documentation/','title':"Documentation",'content':""});index.add({'id':6,'href':'/knowledge-base/system-design/domain_driven_design/','title':"Domain Driven Design",'content':"See raw in Lightbend Academy\nUseful for modelling use-cases before attempting to implement it whether in Software or mere Diagrams.\nSubject-Verb-Object notation Allows having a consistent way to phrase activies our events in the domain.\nExample: Host checks current reservation.\n Subject: Host Verb: Checks Object: Reservation  Note that \u0026ldquo;current\u0026rdquo; can be seen as a modifier.\nSometimes there may be multiple objects. E.g., \u0026ldquo;Bartender collects Payment for a Drink Order\u0026rdquo;:\n Both are objects \u0026ldquo;Payment\u0026rdquo; is a direct object. \u0026ldquo;Drink Order\u0026rdquo; is a indirect object.  Regardless, diferentiation is not that relevant.\nBounded Context Each one have unique domain concepts and not all contexts are compatible with others.\nAnti-Corruption Layer Solves issues where coupling starts. This layer leaves right next to the bounded context to avoid leaking info from/to that bounded context.\nTypical example: Let\u0026rsquo;s put everything in the same bag.\nWhat happens is that we have a layer responsible for translating similar concepts from one bounded context to another.\nHow to implement: Abstract interface as it represents the contract in its purest way without compromising - Sometimes abstractions are too much indirection but do understand. :shrug:\nactor User control \u0026quot;Anti Corruption Layer\u0026quot; as ACL entity Component User -\u0026gt; ACL: Process X ACL -\u0026gt; ACL: Translate concept X to Y ACL -\u0026gt; Component: Process Y Component --\u0026gt; ACL: Z ACL --\u0026gt; User: Z This is also useful for legacy systems. In this case a Anti Corruption Layer would be preferable on either end.\nTODO Simpler diagram (if plantuml is able to generate one and I understand how..) Context Map Are a way of of visualizating Bounded contexts and the relationships between them.\n[Bounded Context A]Â -\u0026gt; [Bounded Context B] [Bounded Context A] -\u0026gt; [Bounded Context C] [Bounded Context B] -\u0026gt; [Bounded Context C] [Bounded Context C] -\u0026gt; [Bounded Context D]    Arrows represent dependencies. Lines may be labelled to indicate the nature of the relationship.  TODO Discovery Process using Event Storming Types of Domain Activities  Command: A request yet to happen and can be rejected. Usually delivered to a specific destination and changes the state of the domain. Events: Action that happened in the past. Hence they can not be rejected. Often broadcast to many destinations. Record a change to the state of the domain, often the result of a command (what are the alternatives?). Query: Requestfor information about the domain. Usually delievered to a specific destination. Do not change the state of the domain.  All of these represent the types of messages in a Reactive System and form the API for a Bounded Context.\n"});index.add({'id':7,'href':'/knowledge-base/jvm/jackson/','title':"Jackson",'content':"Sane Settings After working a while with this I want to register these sane defaults:\nconfigure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, true) configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false) FAIL_ON_NULL_FOR_PRIMITIVES Setting FAIL_ON_NULL_FOR_PRIMITIVES forces clients to explicitely provide all values including primitives. Consider the following POJO:\ndata class Foo(bar: Boolean) Without the setting, a payload such as { } would render ~Foo(bar=false)~ despite the lack of default value. Given this, to guarantee consistency between the source-code and the external contract, I advise enabling this.\nFAIL_ON_UNKNOWN_PROPERTIES Setting FAIL_ON_UNKNOWN_PROPERTIES is useful when working on two systems in paralel. Settings this to false enables clients to send fields to the server that are not yet supported but will be. The alternative would be:\n Server includes those fields as optional fields (to avoid breaking current clients). Server roll-out. Clients update their HTTP clients to include the new fields. Once all-known clients support the new fields, make the same fields mandatory.  By setting this to true, this whole orchestration is not required.\nTODO Sub-Types Consider the following example that attempts to model a DSL that supports + and - operations.\nsealed class Expression data class Sum(val a: Int, val b: Int): Expression() data class Sub(val a: Int, val b: Int): Expression() data class Request( @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = \u0026#34;type\u0026#34;, visible = true) @JsonSubTypes( JsonSubTypes.Type(value = Sum::class, name = \u0026#34;+\u0026#34;) JsonSubTypes.Type(value = Sub::class, name = \u0026#34;-\u0026#34;) ) val operation: Expression ) In short, this is saying if the JSON contains a field name type with value + it would deserialize to Sum and to Sub if type had value -. I.e., a sum operation between 1 and 2 would require the following JSON payload:\n{ \u0026#34;type\u0026#34;: \u0026#34;+\u0026#34;, \u0026#34;operation\u0026#34;: { \u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2 } } "});index.add({'id':8,'href':'/knowledge-base/jvm/','title':"JVM",'content':""});index.add({'id':9,'href':'/knowledge-base/security/jwt/','title':"JWT",'content':"What it is JSON Web Tokens\nWhat it solves What it does not solve "});index.add({'id':10,'href':'/knowledge-base/messaging-systems/','title':"Messaging Systems",'content':""});index.add({'id':11,'href':'/knowledge-base/messaging-systems/overview/','title':"Messaging Systems Comparison",'content':"Kafka Event Streaming, persistent.\nRabbitMQ Low latency.\nPulsar Made by Apache\nTODO   Read this comparison: https://www.confluent.io/kafka-vs-pulsar/#:~:text=In%20reality%2C%20Kafka%2C%20RabbitMQ%2C,Pulsar%20sits%20somewhere%20in%20between.  "});index.add({'id':12,'href':'/knowledge-base/monitoring/','title':"Monitoring",'content':""});index.add({'id':13,'href':'/knowledge-base/work/random-memories/','title':"Random Memories",'content':"Curious ideas/sentences and what not from now and then. Some things are pretty obvious but worthwhile remembering (:\n Failure in systems are inevitable. We have to accept and build a system that isolates such failures in a way that becomes unnoticible to the end-user. User does not care whether the software was faulty due to a third-party vender or not. When we build software we have to consider third-party vendors and if we don\u0026rsquo;t properly isolate ourselves from their faulty behavior, users are going to pay for that.     Responsiveness builds user confidence.\n  Domain: Sphere of knowledge that models either a business or an idea.\n  "});index.add({'id':14,'href':'/knowledge-base/documentation/readme/','title':"readme",'content':"Several examples   https://github.com/matiassingers/awesome-readme\nKey take-ways of some:\n Logo top TOC (horizontally) Demo How to use LICENCE  Like minimalistic versions as they require less maintenance (hmmm :thinking-face:)\n  "});index.add({'id':15,'href':'/knowledge-base/security/','title':"Security",'content':""});index.add({'id':16,'href':'/knowledge-base/data-processing/states-of-data/','title':"States of Data",'content':"States of data:\n At Rest: Data that is not consumed at the time is injested. It is stored and then consumed later in a batch process. In Transit: Data that is travelling between point A and point B. In Use: Data that is opened for treatment  Encountered several concerns regarding how such data must be handled. Follows a link to be reviewed later:three-states-of-data\n"});index.add({'id':17,'href':'/knowledge-base/system-design/','title':"System Design",'content':""});index.add({'id':18,'href':'/knowledge-base/work/way-of-work/','title':"Way of work",'content':"It\u0026rsquo;s not about being right nor prove others wrong  Corollary 1: if it\u0026rsquo;s wrong but it works, then it\u0026rsquo;s not wrong. Corollary 2: if you\u0026rsquo;re right but it doesn\u0026rsquo;t change the outcome, then it doesn\u0026rsquo;t matter. Corollary 3: if you\u0026rsquo;re right, but it doesn\u0026rsquo;t work, then you\u0026rsquo;re wrong. Corollary 4: if you prove someone else wrong, but their answer works and yours doesn\u0026rsquo;t, then they\u0026rsquo;re right and you\u0026rsquo;re wrong. Corollary 5: if you prove someone\u0026rsquo;s solution to be wrong even though it does provide value, then you have not yet provided any value until you propose something better.  "});index.add({'id':19,'href':'/knowledge-base/work/','title':"Work",'content':""});index.add({'id':20,'href':'/knowledge-base/uncategorized/lightbend-academy/','title':"Lightbend Academy",'content':" Referred in\n Domain Driven Design   Some notes regarding Lighbend academy at https://academy.lightbend.com/. Taking this opportunity as it is free during this summer.\nHope to learn more about Reactive + Akka + Actors + Streams.\nHmmm\u0026hellip; is Data Engineering something I would like to work with? :thinking:\nTODO TENHO QUE FAER ISTO DONE CENAS [X] DONE  CENAS AQUI\n case class Cenas(val a: Int) case class Outras(val b: Int) sealed trait Maybe[+T] final case object Empty extends Maybe[Nothing] final case class Just[T](t: T) extends Maybe[T] println(2) val a = Just(2) println(a) Glossary **\nCenas Cenas    Cenas\n   Cenas\n   Cenas\n Data at Rest: Data that is not consumed at the time is injested. It is stored and then consumed later in a batch process.        Introduction to Reactive Systems Context: Increasing complexity which requires many nodes (2-3 on simpler) and far more nodes on more complex systems. And the amount of data that is handled today is far larger that it was before, in order to petabytes and is no longer rest, i.e., is actively changing making very hard to catch up.\nGoal: Provide an experience that is responsive under all conditions:\n Scale from 10 users to million of users. Consume solely the resources required to support the current work-load (IMO this does not say much, maybe they are referring to the lack of batch jobs that periodically run?) It scales horizontally across several nodes Consistent level of quality and responsiveness  Well.. they provide some explanations regarding avoiding downtime, I am curious which use-cases where this architecture solves as they are use-cases where this can be tricky.\nReactor Principles  Most important: Responsive - Always respond in a timely manner. Leads to have to be resiliency even when failures occur. Elastic to keep responsive specially when the system load changes - goes both ways as keeping lots of resources is expensive specially when unjustified. Foundation on Message Driven (or event driven in reactive manifesto) - Async and non-blocking message.  On resiliency: Achieved through:\n Replication Isolation Containment Delegation  Isolation on single components. Recovery is delegated to an external component. Hmmm, kinda reminds me k8s when it detects Pods as not ready and forwards traffic to the remaining pods.\nOn Elasticicity Responsivess regardless of the load. Zero contention and no central bottlenecks - Seems like to be good be true despite possible. Well.. isn\u0026rsquo;t what we always want regardless of the architecture? Predictive Auto-Scaling techniques. Responsiveness during peaks while scaling down assures cost effectivness without losing responsiviness.\nOn MEssage Driven All previous principles are supported by this. Loose coupling, isolation and location transparency - I kinda disagree with loose coupling, as the systems still will still depend on 3rd party behavior regardless of the communication medium. Resources are only consumed while active. Idea is that we we stop using resources while waiting for an system to respond, we can do something else while the response haven\u0026rsquo;t arrived (async)\nReactive Principles Example - git Git is a good example regarding reactive principles:\n Asyncronous and non-blocking as the work is submitted through PR and I can keep on working locally with no interruptions. Message based as it is basically \u0026ldquo;please review this\u0026rdquo;. SeeActor Model. Resiliency as each user has basically a copy of the whole repository locally. The local machine is isolated from the remote. Elastic has we can have multiple copies and does not cause problemas having that repository sync on that many machines. Responsive.  Reactive Programming vs Reactive Systems They are not the same.\nReactive systems apply the reactive principles on a architectural level.\nReactive Programming can be (and often is) used to build reactive systems but that does not mean that it is a reactive system.\nIn order to have a reactive architecture, it means that the reactive systems needs to be separated thorugh asyncronous boundaries.\nTODO https://www.lightbend.com/white-papers-and-reports/reactive-programming-versus-reactive-systems Domain Driven Design Goal: Software implementation that is based on an evolving model that is understood by the domain experts.\nDomain: Sphere knowledge. Referes to busuiness or idea we are trying to model.\nTHe software is the implementation of such domain that experts are able to understand.\nGoal: Build a model that domain expderts understand. One that we show them without they understanding the Software.\nLEads to a way to communicate with them.\nIt is important to mention that the model is not hte software. Model represents the understanding of hte domain. The softewrae is solely the implementation of hte model. It can be implemented on diagrams which is not software but an implementation nonetheless.\nBut the software should be implemented in a way that reflecfts the model in a way that 1:1 parity between the model and the implementation.\nThis requires a common language that both parties. understand leading to:\n Ubiquitous Language: Common language that enables communication between the domain experts and the developers. Terminologuy in there comes from the domain experts. Software termms should be avoided. However sometimes we have to introduce soem terms to the language and such terms should go through the domain experts as well as they may have already a work for that.  Decomposing Business domains are typically large and complicated. With many ideas, actions and rules taht interact in complex ways.\nStrategy: Take the large domain and seperate onto sub domains by grouping related ideas, actions and rules - Maybe use-cases?\nHowever it is normal having conceps that span multiple sub domains however it is important to avoid abstract already as there may be slight changes. For example, a customer in the context of an online order is different from a customer in the context of in-store purchase. Therefore, there should be modeled as different entities.\nBounded Context: Ubiquotious Language and model for a :w:sub-domain. The meaning of a concept by change from one bounded context to another.\nMicroservices are built around bounded contexts.\nHow to determine those boundaries? Some guidelines:\n IMO Use-cases\u0026hellip; Consider human culture and interactions, i.e., how different groups of people interact with a given entity. Look for changes in the ubiquitous language. Variations suggest a new context. Look for variations where the informatio become relevant/irrelevant.  Strongly separated bounded contexts reuslt in smooth workflows.\nIf it awkwards it may be due to a misunderstanding of the domain.\nEvent First Domain Driven Design Look at the activities (i.e. use-cases?) and start grouping such activities.\nTODO Event Storming - Check what it is Reactive Barbecue Does inventory managament to menu pricing to deliveries and online orders and reservations.\nOther TODO There is a thing called Reactive Manifesto https://github.com/reactivemanifesto/reactivemanifesto\n"});index.add({'id':21,'href':'/knowledge-base/uncategorized/org_protocol/','title':"Org-Protocol",'content':"Useful guide: https://github.com/xuchunyang/setup-org-protocol-on-mac\n"});index.add({'id':22,'href':'/knowledge-base/uncategorized/relevant-xkcds/','title':"Relevant xkcds",'content':"On Standards https://xkcd.com/927/\n"});index.add({'id':23,'href':'/knowledge-base/uncategorized/','title':"Uncategorized",'content':""});})();
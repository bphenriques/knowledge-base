<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>functional-programming on Bruno Henriques's Digital Garden ðŸŒ±</title><link>https://bphenriques.github.io/knowledge-base/tags/functional-programming/</link><description>Recent content in functional-programming on Bruno Henriques's Digital Garden ðŸŒ±</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Referential Transparency</title><link>https://bphenriques.github.io/knowledge-base/notes/referential_transparency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/notes/referential_transparency/</guid><description>Referential transparency: replacing an expression by its bound value doesn&amp;rsquo;t alter the behaviour of your program. This gives huge benefits, which I&amp;rsquo;ll talk about later.
References # https://www.reddit.com/r/scala/comments/8ygjcq/can_someone_explain_to_me_the_benefits_of_io/ https://www.youtube.com/watch?v=x3GLwl1FxcA&amp;t=189s</description></item></channel></rss>
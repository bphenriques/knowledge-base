:PROPERTIES:
:ID:       2fa03d4f-948e-4a6e-a38b-178456b578e2
:END:
#+TITLE: Scala Experiments
#+filetags: scala data-structures
#+HUGO_TAGS: scala data-structures

* Implementing ~Tree~

#+begin_src scala :eval never-export
sealed class Tree[T] {
  def stream(): LazyList[T] = this match {
    case Leaf(value) => LazyList(value)
    case Branch(left, right) => left.stream() #::: right.stream()
  }
}
case class Branch[T](left: Tree[T], right: Tree[T]) extends Tree[T]
case class Leaf[T](value: T) extends Tree[T]

val tree =
  Branch(
    Leaf(1),
    Branch(
      Leaf(2),
      Leaf(3)
    )
  )

val nextInOrder = tree.stream().dropWhile(_ != 2).drop(1).headOption
println(nextInOrder)
#+end_src

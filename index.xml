<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Bruno Henriques</title><link>https://bphenriques.github.io/knowledge-base/</link><description>Recent content in Introduction on Bruno Henriques</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/index.xml" rel="self" type="application/rss+xml"/><item><title>Actor Model</title><link>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</guid><description>In the context of Reactive Systems, Actor model is a reactive tool, a paradigm that:
Message driven - All communication between actors is done with async non-blocking messages. Abstractions provide elasticity and resiliency. Akka uses the actor model - https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html?language=scala
Fundamental All computation occurs inside of the actor. Each actor has an address. Actors only communicate through asyncronous messages. The message driven system provides location transparency, i.</description></item><item><title>Apache Spark</title><link>https://bphenriques.github.io/knowledge-base/data-processing/apache-spark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/data-processing/apache-spark/</guid><description>Glossary RDD - Resilient Distributed Datasets</description></item><item><title>Bug Management</title><link>https://bphenriques.github.io/knowledge-base/monitoring/bug-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/monitoring/bug-management/</guid><description>Some personal notes on simplifying the process so that one can focus on getting back to the other tasks at hand.
On Reporting Bugs Focus on the impact for the client. You do not need to debug right away. You do not need to establish the timeline - The report can solely include the context. The person assigned to the issue will pick on the context provided in the ticket and explore.</description></item><item><title>Cost Comparison</title><link>https://bphenriques.github.io/knowledge-base/tools/cost-comparison/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/tools/cost-comparison/</guid><description>Not sure the best place to place this.
Comparing if it is worth purchasing a service https://isitworththecost.com/</description></item><item><title>Overview</title><link>https://bphenriques.github.io/knowledge-base/messaging-systems/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/messaging-systems/overview/</guid><description>Kafka Event Streaming, persistent.
RabbitMQ Low latency.
Pulsar Made by Apache
TODO Read this comparison: https://www.confluent.io/kafka-vs-pulsar/#:~:text=In%20reality%2C%20Kafka%2C%20RabbitMQ%2C,Pulsar%20sits%20somewhere%20in%20between.</description></item><item><title>readme</title><link>https://bphenriques.github.io/knowledge-base/documentation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/documentation/readme/</guid><description>Several examples https://github.com/matiassingers/awesome-readme
Key take-ways of some:
Logo top TOC (horizontally) Demo (!) How to use LICENCE Like minimalistic versions as they require less maintenance (hmmm :thinking-face:)</description></item><item><title>short-sentence-reminder</title><link>https://bphenriques.github.io/knowledge-base/work/short-sentence-reminder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/work/short-sentence-reminder/</guid><description>Kinda short sentences? Some things are pretty obvious (:
Failure in systems are inevitable. We have to accept and build a system that isolates such failures in a way that becomes unnoticible to the end-user. User does not care whether the software was faulty due to a third-party vender or not. When we build software we have to consider third-party vendors and if we don&amp;rsquo;t properly isolate ourselves from their faulty behavior, users are going to pay for that.</description></item><item><title>States of Data</title><link>https://bphenriques.github.io/knowledge-base/data-processing/states-of-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/data-processing/states-of-data/</guid><description>States of data:
At Rest: Data that is not consumed at the time is injested. It is stored and then consumed later in a batch process. In Transit: Data that is travelling between point A and point B. In Use: Data that is opened for treatment Encountered several concerns regarding how such data must be handled. Follows a link to be reviewed later:three-states-of-data</description></item><item><title>Tips to live by</title><link>https://bphenriques.github.io/knowledge-base/work/tips-to-live-by/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/work/tips-to-live-by/</guid><description>It&amp;rsquo;s not about being right nor prove others wrong Corollary 1: if it&amp;rsquo;s wrong but it works, then it&amp;rsquo;s not wrong. Corollary 2: if you&amp;rsquo;re right but it doesn&amp;rsquo;t change the outcome, then it doesn&amp;rsquo;t matter. Corollary 3: if you&amp;rsquo;re right, but it doesn&amp;rsquo;t work, then you&amp;rsquo;re wrong. Corollary 4: if you prove someone else wrong, but their answer works and yours doesn&amp;rsquo;t, then they&amp;rsquo;re right and you&amp;rsquo;re wrong. Corollary 5: if you prove someone&amp;rsquo;s solution to be wrong even though it does provide value, then you have not yet provided any value until you propose something better.</description></item><item><title>Lightbend Academy</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/lightbend-academy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/lightbend-academy/</guid><description>Some notes regarding Lighbend academy at https://academy.lightbend.com/. Taking this opportunity as it is free during this summer.
Hope to learn more about Reactive + Akka + Actors + Streams.
Hmmm&amp;hellip; is Data Engineering something I would like to work with? :thinking:
Glossary Data at Rest: Data that is not consumed at the time is injested. It is stored and then consumed later in a batch process. Introduction to Reactive Systems Context: Increasing complexity which requires many nodes (2-3 on simpler) and far more nodes on more complex systems.</description></item><item><title>Relevant xkcds</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/relevant-xkcds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/relevant-xkcds/</guid><description>On Standards https://xkcd.com/927/</description></item></channel></rss>
#+TITLE: Domain Driven Design
#+SETUPFILE: ./_index.org
#+ROAM_TAGS: system-design lightbend
#+ROAM_ALIAS:

See raw in [[file:../uncategorized/lightbend-academy.org][Lightbend Academy]]

Useful for modelling use-cases before attempting to implement it whether in Software or mere Diagrams.

* Subject-Verb-Object notation

Allows having a consistent way to phrase activies our events in the domain.

Example: Host checks current reservation.
- *Subject*: Host
- *Verb*: Checks
- *Object*: Reservation

Note that "current" can be seen as a modifier.

Sometimes there may be multiple objects. E.g., "Bartender collects Payment for a Drink Order":
- Both are objects
- "Payment" is a direct object.
- "Drink Order" is a indirect object.

Regardless, diferentiation is not that relevant.

* Bounded Context

Each one have unique domain concepts and not all contexts are compatible with others.


* Anti-Corruption Layer

Solves issues where coupling starts. This layer leaves right next to the bounded context to avoid leaking info from/to that bounded context.

Typical example: Let's put everything in the same bag.

What happens is that we have a layer responsible for translating similar concepts from one bounded context to another.

How to implement: Abstract interface as it represents the contract in its purest way without compromising - Sometimes abstractions are too much indirection but do understand. :shrug:

#+BEGIN_SRC plantuml :file anti-corruption-layer.png
actor User
control "Anti Corruption Layer" as ACL
entity Component

User -> ACL: Process X
ACL -> ACL: Translate concept X to Y
ACL -> Component: Process Y
Component --> ACL: Z
ACL --> User: Z
#+END_SRC

This is also useful for legacy systems. In this case a Anti Corruption Layer would be preferable on either end.

** TODO Simpler diagram (if plantuml is able to generate one and I understand how..)

* Context Map

Are a way of of visualizating Bounded contexts and the relationships between them.

#+BEGIN_SRC plantuml :file context-map.png
[Bounded Context A]Â -> [Bounded Context B]
[Bounded Context A] -> [Bounded Context C]
[Bounded Context B] -> [Bounded Context C]
[Bounded Context C] -> [Bounded Context D]
#+END_SRC


- Arrows represent dependencies.
- Lines may be labelled to indicate the nature of the relationship.


* TODO Discovery Process using Event Storming

* Types of Domain Activities

- *Command*: A request yet to happen and can be rejected. Usually delivered to a specific destination and changes the state of the domain.
- *Events*: Action that happened in the past. Hence they can not be rejected. Often broadcast to many destinations. Record a change to the state of the domain, often the result of a command (what are the alternatives?).
- *Query*: Requestfor information about the domain. Usually delievered to a specific destination. Do not change the state of the domain.

All of these represent the types of messages in a Reactive System and form the API for a Bounded Context.

* Domain Objects
:PROPERTIES:
:ID:       5cb5d960-9faf-4ab2-8f89-2315cddc747c
:END:

- *Value objects*: Defined by its attribute. Immuatable. Messages in Reactive Systems are implemented as Value Objects.
- *Entity*: Defined by an unique identity. The fields may change but not its identitity. Are the soruce of truth - Actors in Akka or Entitities in Lagom (hopefully will /click/ later)
[[file:monolith.org][Monolith]]- *Aggregate*: Collection of domain objects bound to a root entity:
  - Example: Person (Aggregate Root), Name (Aggregate), Address (Aggregate).
  - Transactions should not span multiple aggregate roots.
  - The Aggregate Root may change between bounded contexts. Aggregate Root == Root Entity.
  - Good cadnidates for distribution in Reactive Systems.
  - Question: How to determine?
    - Is the entity involved in more operations in the same bounded context?
    - Does it make sense deleting other entities when this one is deleted?
    - Will a single transaction span multiple entities?

* Domain Abstractiosn
** Services

Busines Logic encapsulated. Should be stateless otherwise they become an entity or a value object.

Should be fairly thin.

** Factories

Constructing domain object may not be trivial as they may have to access external resources (DBs, files, REst APIs, etc).

** Repositories

Similar to factories but used to get or modify existing objects. They work often over databases but can work with files or Rest Apis (I actually prefer "Gateways" for Rest APIs).

Note: Factories and Repositories can be the same in practice.

* Hexagonal Architecutre

Is not directly related with domain driven design but is very compatible.

Domain is at the core and is at teh center becoming the architectural focus. Then there are ports to communicate with the domain exposed as API for the domain. INfrastructure contains adapters that map to the ports.

Like an Onion

- Domain
  - API - The ports
    Infrastructure - Adapts incoming and outgoing traffic in to the ports.

Outer layers depends on inner layers. And inner layers have no knowledge of other layers.

:thinking: This does not seem different from the typical layered design with DB -> Services -> API

Ensures proper spearation of infrastructure from domain.

These layers may be modelled through packages or projects. Details are not important. The important thing is to make the domain portable.

Would like a concrete example on how it really differents from the N tiered design.

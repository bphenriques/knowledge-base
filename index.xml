<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Bruno Henriques</title><link>https://bphenriques.github.io/knowledge-base/</link><description>Recent content in Introduction on Bruno Henriques</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/index.xml" rel="self" type="application/rss+xml"/><item><title>Actor Model</title><link>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</guid><description>In the context of Reactive Systems, Actor model is a reactive tool, a paradigm that:
Message driven - All communication between actors is done with async non-blocking messages. Abstractions provide elasticity and resiliency. Akka uses the actor model - https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html?language=scala
Fundamental # All computation occurs inside of the actor. Each actor has an address. Actors only communicate through asyncronous messages. The message driven system provides location transparency, i.</description></item><item><title>Apache Spark</title><link>https://bphenriques.github.io/knowledge-base/data-processing/apache-spark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/data-processing/apache-spark/</guid><description>Glossary # RDD - Resilient Distributed Datasets</description></item><item><title>Bug Management</title><link>https://bphenriques.github.io/knowledge-base/monitoring/bug-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/monitoring/bug-management/</guid><description>Some personal notes on simplifying the process so that one can focus on getting back to the other tasks at hand.
On Reporting Bugs # Focus on the impact for the client. You do not need to debug right away. You do not need to establish the timeline - The report can solely include the context. The person assigned to the issue will pick on the context provided in the ticket and explore.</description></item><item><title>Command Query Responsibility Segregation (CQRS)</title><link>https://bphenriques.github.io/knowledge-base/system-design/command_query_responsibility_segregation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/command_query_responsibility_segregation/</guid><description>Referred in
Event Sourcing Eventually consistent by design which always present but now is explicit about it.
Some Aggregate Roots are a better fit for write models but do not fit other read models. Requirements for both models are different.
Command Query Responsibility Segregation (CQRS) aims to separate read models from write models. This is specially problematic when using Event Sourcing. Note that Event Sourcing is not a requirement for CQRS but are often combined.</description></item><item><title>Command Sourcing</title><link>https://bphenriques.github.io/knowledge-base/system-design/command_sourcing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/command_sourcing/</guid><description>Command Sourcing # Similar to Event Sourcing but persists commands as opposed to events so:
Issue command
Persist command
Run asyncronous the command
They should be idempotent as they run multiple times (e.g., failures).
Must be validated so that they do not become stuck in the queue forever.
Bad: The sender might not be notified if the command fails due to the decouple nature.</description></item><item><title>Consistency And Availability</title><link>https://bphenriques.github.io/knowledge-base/system-design/consistency_and_availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/consistency_and_availability/</guid><description>Scalability # It can meets increases in demand while remaining responsive.
This is different from performance. Performance optimizes response time (latency) while scalability optimizes ability to handle load. Requests per second actually measures both but we do not know which aspect was improved.
Note Scalability is not the number of requests qwe can handle a in a given period of time (req/sec) but he number of requests itself (load).</description></item><item><title>Coursera</title><link>https://bphenriques.github.io/knowledge-base/learning/coursera/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/learning/coursera/</guid><description>Interested in:
https://www.coursera.org/learn/learning-how-to-learn</description></item><item><title>CQRS/ES</title><link>https://bphenriques.github.io/knowledge-base/system-design/cqrs_es/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/cqrs_es/</guid><description>CQRS/ES stands for Command Query Responsibility Segregation and Event Sourcing.
Use Cases:
Auditing (e.g., banking, accounting) High Scalability High Resiliency There are trade-offs, what are they?
CQRS # State Based Persistence. Every time an update is applied to the database it obliterates previous state.
Can&amp;rsquo;t fix bad state due to previous error. Can&amp;rsquo;t retroactively apply new domain insights (because we do not have the previous states). This solely tells where we are but not how we got there: must be allied with Event Sourcing.</description></item><item><title>Curriculum</title><link>https://bphenriques.github.io/knowledge-base/work/curriculum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/work/curriculum/</guid><description>Some reference pages:
https://www.myperfectresume.com/cv/examples/computer-software/engineer https://business.linkedin.com/talent-solutions/blog/linkedin-best-practices/2016/7-linkedin-profile-summaries-that-we-love-and-how-to-boost-your-own</description></item><item><title>Domain Driven Design</title><link>https://bphenriques.github.io/knowledge-base/system-design/domain_driven_design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/domain_driven_design/</guid><description>Referred in
Microservices See raw in Lightbend Academy
Useful for modelling use-cases before attempting to implement it whether in Software or mere Diagrams.
Subject-Verb-Object notation # Allows having a consistent way to phrase activies our events in the domain.
Example: Host checks current reservation.
Subject: Host Verb: Checks Object: Reservation Note that &amp;ldquo;current&amp;rdquo; can be seen as a modifier.
Sometimes there may be multiple objects.</description></item><item><title>Emacs</title><link>https://bphenriques.github.io/knowledge-base/editors/emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/editors/emacs/</guid><description>Org-Mode # Org-protocol is cool and opens possibilities (like there weren&amp;rsquo;t enoguh :overwhelmed:):
https://orgmode.org/worg/org-contrib/org-protocol.html#orgheadline8 Configuring # Literate config is a thing but unfortunately as far as I researched it has to be contained in a single file. I rather have separate files per use-case.
Cool reference links:
https://tecosaur.github.io/emacs-config/config.html http://doc.norang.ca/org-mode.html:w https://github.com/jethrokuan/dots/blob/0064ea2aab667f115a14ce48292731db46302c53/.doom.d/config.el#L495 https://github.com/nmartin84/.doom.d#orgb81fe7f https://github.com/howardabrams/dot-files/blob/master/emacs-org.org</description></item><item><title>Event Sourcing</title><link>https://bphenriques.github.io/knowledge-base/system-design/event_sourcing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/event_sourcing/</guid><description>Referred in
CQRS/ES Command Sourcing Event Sourcing (ES) # In addition to persisting state, one persists audit logs. This captures the history. It is better to have this in a database as it provides transactionality.
Wary when persisting in the database and in-memory:
Two potential source of truth if they disagree. Both must be updated in transactionality. A bug in the code may lead to both of them becoming out-of-sync.</description></item><item><title>Hands-on Scala Programming</title><link>https://bphenriques.github.io/knowledge-base/learning/hands_on_scala_programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/learning/hands_on_scala_programming/</guid><description>Follows my notes on the Haoyi Li.&amp;rsquo;s book: &amp;ldquo;Hands-on Scala Programming&amp;rdquo; (https://www.handsonscala.com/).
As an experiment, I coding directly in the org-mode file using Babel to execute the Scala blocks:
TODO Some introduction # Point to dotfiles Point to the Babel package Notes # Lack of auto-complete when writing here. Compilation errors are hard to track. Workaround is to open a separate buffer with the ammonite REPL console.</description></item><item><title>JWT</title><link>https://bphenriques.github.io/knowledge-base/security/jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/security/jwt/</guid><description>What it is # JSON Web Tokens
What it solves # What it does not solve #</description></item><item><title>Message Driven Architecture</title><link>https://bphenriques.github.io/knowledge-base/system-design/message_driven_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/message_driven_architecture/</guid><description>Asyncronous and non-blocking. The sender does not actively wait for a response.
Advantages:
Resources are freed immediatly. Reduced contention Messages can be queued for deleivery in case the receiver&amp;rsquo;s is offline. Provides a higher level of reliability. Disavantages:
Make transactions more difficult. How to manage long running transactions that span multiple microservices. Holding transactions open for long periods result in slow, brittle systems. The role of syncronous messags:</description></item><item><title>Messaging Systems Comparison</title><link>https://bphenriques.github.io/knowledge-base/messaging-systems/messaging-systems-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/messaging-systems/messaging-systems-overview/</guid><description>Kafka # Event Streaming, persistent.
RabbitMQ # Low latency.
Pulsar # Made by Apache
TODO # Read this comparison: https://www.confluent.io/kafka-vs-pulsar/#:~:text=In%20reality%2C%20Kafka%2C%20RabbitMQ%2C,Pulsar%20sits%20somewhere%20in%20between.</description></item><item><title>Microservices</title><link>https://bphenriques.github.io/knowledge-base/system-design/microservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/microservices/</guid><description>Referred in
Service Oriented Architecture Sobre qq coisa Subset of Service Oriented Architecture where each service is deployed separately:
Microservices can be physically separated and independently deployed. Each have its own data store. Independent and self governing. Communication is syncronous or asyncronous (e.g., through message brokers). Loose coupling between components (more or less by experience but that is design flaw likely :thinking:). Shorter development and release cycles.</description></item><item><title>Monolith</title><link>https://bphenriques.github.io/knowledge-base/system-design/monolith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/monolith/</guid><description>Referred in
Domain Driven Design Service Oriented Architecture Some notes taken during the lightbend course on Reactive Microservices. Some of these ideas are familiar as they are intuitive.
Deployed as a single unit. No Clear Isolation. Complex Depedencies -&amp;gt; Hard to understand and modify. Communication using syncronous calls. Hmmm, I disagree and I think that it depends.. E.g., Spring allows services call another with asyncronous methods within the same monolith.</description></item><item><title>Overview</title><link>https://bphenriques.github.io/knowledge-base/databases/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/databases/overview/</guid><description>https://medium.com/@rakyll/things-i-wished-more-developers-knew-about-databases-2d0178464f78</description></item><item><title>Random Memories</title><link>https://bphenriques.github.io/knowledge-base/work/random-memories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/work/random-memories/</guid><description>Curious ideas/sentences and what not from now and then. Some things are pretty obvious but worthwhile remembering (:
Failure in systems are inevitable. We have to accept and build a system that isolates such failures in a way that becomes unnoticible to the end-user. User does not care whether the software was faulty due to a third-party vender or not. When we build software we have to consider third-party vendors and if we don&amp;rsquo;t properly isolate ourselves from their faulty behavior, users are going to pay for that.</description></item><item><title>Reactive Systems</title><link>https://bphenriques.github.io/knowledge-base/system-design/reactive_systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/reactive_systems/</guid><description>Goal # Provide an experience that is responsive under all conditions.
This requires:
Ability to scale from 10 users to million of users. Consume solely the resources required to support the current work-load. Reactor Principles # Responsive # Always respond in a timely manner.
Resiliency # Isolate failures on single components - Similar to how a boat is designed.
Elastic # Keep responsive specially when the system load changes which provides a more efficient usage of resources.</description></item><item><title>Readme</title><link>https://bphenriques.github.io/knowledge-base/documentation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/documentation/readme/</guid><description>Several examples # https://github.com/matiassingers/awesome-readme Like minimalistic versions as they require less maintenance (hmmm :thinking-face:)</description></item><item><title>Service Oriented Architecture</title><link>https://bphenriques.github.io/knowledge-base/system-design/service_oriented_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/service_oriented_architecture/</guid><description> Referred in
Monolith Microservices As opposed to Monolith, services do not share a database and all access must be done through a API exposed by the service. They may be in the same process (Monolith) or may be separated (Microservices). This reduces coupling.
E.g.:
Orders -&amp;gt; RDBMS Customers -&amp;gt; No SQL Reservations -&amp;gt; Web Service Menu -&amp;gt; RDBMS</description></item><item><title>States of Data</title><link>https://bphenriques.github.io/knowledge-base/data-processing/states-of-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/data-processing/states-of-data/</guid><description>States of data:
At Rest: Data that is not consumed at the time is injested. It is stored and then consumed later in a batch process. In Transit: Data that is travelling between point A and point B. In Use: Data that is opened for treatment Encountered several concerns regarding how such data must be handled. Follows a link to be reviewed later:three-states-of-data</description></item><item><title>System Design Articles</title><link>https://bphenriques.github.io/knowledge-base/system-design/articles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/system-design/articles/</guid><description> http://boringtechnology.club/</description></item><item><title>Technical Writing</title><link>https://bphenriques.github.io/knowledge-base/learning/technical_writing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/learning/technical_writing/</guid><description>https://developers.google.com/tech-writing/overview</description></item><item><title>Way of work</title><link>https://bphenriques.github.io/knowledge-base/work/way-of-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/work/way-of-work/</guid><description>It&amp;rsquo;s not about being right nor prove others wrong # Corollary 1: if it&amp;rsquo;s wrong but it works, then it&amp;rsquo;s not wrong. Corollary 2: if you&amp;rsquo;re right but it doesn&amp;rsquo;t change the outcome, then it doesn&amp;rsquo;t matter. Corollary 3: if you&amp;rsquo;re right, but it doesn&amp;rsquo;t work, then you&amp;rsquo;re wrong. Corollary 4: if you prove someone else wrong, but their answer works and yours doesn&amp;rsquo;t, then they&amp;rsquo;re right and you&amp;rsquo;re wrong.</description></item><item><title>Emacs</title><link>https://bphenriques.github.io/knowledge-base/snippets/emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/emacs/</guid><description>TODO Personalize deft for other directories # For now I do not need.
;;function to run deft in specified directory (defun bjm-deft (dir) &amp;#34;Run deft in directory DIR&amp;#34; (setq deft-directory dir) (switch-to-buffer &amp;#34;*Deft*&amp;#34;) (kill-this-buffer) (deft) )</description></item><item><title>Jackson</title><link>https://bphenriques.github.io/knowledge-base/snippets/jackson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/jackson/</guid><description>Sane Settings # After working a while with this I want to register these sane defaults:
configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, true) configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false) FAIL_ON_NULL_FOR_PRIMITIVES # Setting FAIL_ON_NULL_FOR_PRIMITIVES forces clients to explicitely provide all values including primitives. Consider the following POJO:
data class Foo(bar: Boolean) Without the setting, a payload such as { } would render ~Foo(bar=false)~ despite the lack of default value. Given this, to guarantee consistency between the source-code and the external contract, I advise enabling this.</description></item><item><title>Akka</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/akka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/akka/</guid><description>Akka Distributed Data # CRDTs in distributed data are stored in memory. Can be copied to disk to speed up recovery if a replica fails.
Best used for small data sets with infrequent updates that require high availability.
Limitations CRDT: Do not work with every data type that require a merge function. Some data types are too complex to merge and require the use of tombstone:
A marker that shows something was deleted.</description></item><item><title>dotfiles</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/dotfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/dotfiles/</guid><description>Want to migrate to Nix.
Emacs Configuration # See more on Emacs (some reason it gives ambiguous reference).</description></item><item><title>Event Sourcing</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/event_sourcing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/event_sourcing/</guid><description> Referred in
Command Query Responsibility Segregation (CQRS) TODO - can this be deleted?. #</description></item><item><title>Lightbend Academy</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/lightbend-academy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/lightbend-academy/</guid><description>Referred in
Domain Driven Design Reactive Programming vs Reactive Systems # They are not the same.
Reactive systems apply the reactive principles on a architectural level.
Reactive Programming can be (and often is) used to build reactive systems but that does not mean that it is a reactive system.
In order to have a reactive architecture, it means that the reactive systems needs to be separated thorugh asyncronous boundaries.</description></item><item><title>Linux Tips</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__/</guid><description>Source: https://www.usenix.org/sites/default/files/conference/protected-files/lisa19%5Fmaheshwari.pdf</description></item><item><title>Nix</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/nix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/nix/</guid><description> Referred in
dotfiles Web Note - What Is Nix – Shopify Engineering TODO: Investigate more on this.
Links:
https://wiki.nikitavoloboev.xyz/package-managers/nix https://nixcloud.io/tour/?id=1 https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html https://engineering.shopify.com/blogs/engineering/what-is-nix</description></item><item><title>nota aleatoria</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/nota_aleatoria/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/nota_aleatoria/</guid><description>Tiro notas</description></item><item><title>Org-Protocol</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/org_protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/org_protocol/</guid><description>Useful guide: https://github.com/xuchunyang/setup-org-protocol-on-mac</description></item><item><title>Relevant xkcds</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/relevant-xkcds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/relevant-xkcds/</guid><description>On Standards # https://xkcd.com/927/</description></item><item><title>Sobre qq coisa</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/sobre_qq_coisa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/sobre_qq_coisa/</guid><description>Lembrei mee disto e relaciona-se comMicroservices.
Nota A, Nota B Nota C&amp;hellip;.</description></item><item><title>SSH Agent</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__ssh_agent_explained/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__ssh_agent_explained/</guid><description>Source: https://smallstep.com/blog/ssh-agent-explained/</description></item><item><title>Stack Web Notes</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-stack-enties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-stack-enties/</guid><description>How To Drive Change as a Software Engineer # Source: https://www.lihaoyi.com/post/HowToDriveChangeasaSoftwareEngineer.html
The Dark Side of Events - YouTube # Source: https://www.youtube.com/watch?v=URYPpY3SgS8&amp;amp;feature=youtu.be&amp;amp;t=1884
Ask HN: How to Take Good Notes? | Hacker News # Source: https://news.ycombinator.com/item?id=22473209
Unlearning toxic behaviors in a code review culture | by Sandya Sankarram | Medium # Source: https://medium.com/@sandya.sankarram/unlearning-toxic-behaviors-in-a-code-review-culture-b7c295452a3c</description></item><item><title>Web Note - 1x Engineer</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__1x_engineer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__1x_engineer/</guid><description>Source: https://1x.engineer/</description></item><item><title>Web Note - degoogle | A huge list of alternatives to Google products. Privacy tips, tricks, and links.</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__degoogle_a_huge_list_of_alternatives_to_google_products_privacy_tips_tricks_and_links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__degoogle_a_huge_list_of_alternatives_to_google_products_privacy_tips_tricks_and_links/</guid><description>Source: https://degoogle.jmoore.dev/#useful-links-tools-and-advice
Degoogle</description></item><item><title>Web Note - Remembering what you Read: Zettelkasten vs P.A.R.A.</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__remembering_what_you_read_zettelkasten_vs_p_a_r_a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__remembering_what_you_read_zettelkasten_vs_p_a_r_a/</guid><description>Source: https://www.zainrizvi.io/blog/remembering-what-you-read-zettelkasten-vs-para/</description></item><item><title>Web Note - Stop Taking Regular Notes; Use a Zettelkasten Instead | Hacker News</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__stop_taking_regular_notes_use_a_zettelkasten_instead_hacker_news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__stop_taking_regular_notes_use_a_zettelkasten_instead_hacker_news/</guid><description>Source: https://news.ycombinator.com/item?id=23386630</description></item><item><title>Web Note - The Product-Minded Software Engineer - The Pragmatic Engineer</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__the_product_minded_software_engineer_the_pragmatic_engineer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__the_product_minded_software_engineer_the_pragmatic_engineer/</guid><description>Source: https://blog.pragmaticengineer.com/the-product-minded-engineer/</description></item><item><title>Web Note - Tools for better thinking | Untools</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__tools_for_better_thinking_untools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__tools_for_better_thinking_untools/</guid><description>Source: https://untools.co/</description></item><item><title>Web Note - What Is Nix – Shopify Engineering</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__what_is_nix_shopify_engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__what_is_nix_shopify_engineering/</guid><description>Nix
Source: https://engineering.shopify.com/blogs/engineering/what-is-nix</description></item><item><title>Web Note - Write code that is easy to delete, not easy to… — programming is terrible</title><link>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__write_code_that_is_easy_to_delete_not_easy_to_programming_is_terrible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/uncategorized/web-note__write_code_that_is_easy_to_delete_not_easy_to_programming_is_terrible/</guid><description>Source: https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to</description></item></channel></rss>
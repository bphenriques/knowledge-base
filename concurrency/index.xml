<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on Bruno Henriques</title><link>https://bphenriques.github.io/knowledge-base/concurrency/</link><description>Recent content in Concurrency on Bruno Henriques</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Actor Model</title><link>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</guid><description>Referred in
Lightbend Academy In the context of Reactive Systems, Actor model is a reactive tool, a paradigm that:
Message driven - All communication between actors is done with async non-blocking messages. Abstractions provide elasticity and resiliency. Akka uses the actor model - https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html?language=scala
Fundamental All computation occurs inside of the actor. Each actor has an address. Actors only communicate through asyncronous messages. The message driven system provides location transparency, i.</description></item></channel></rss>
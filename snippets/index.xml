<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Snippets on Bruno Henriques</title><link>https://bphenriques.github.io/knowledge-base/snippets/</link><description>Recent content in Snippets on Bruno Henriques</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>Git</title><link>https://bphenriques.github.io/knowledge-base/snippets/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/git/</guid><description>Get Previous Tag # $ git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | sed 's#^refs/tags/##' | tail -n 2 | head -n 1 *</description></item><item><title>GPG</title><link>https://bphenriques.github.io/knowledge-base/snippets/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/gpg/</guid><description>Automatically export public key to a server:
$ gpg --keyserver pgp.mit.edu --send-keys &amp;lt;KEY&amp;gt;</description></item><item><title>Jackson</title><link>https://bphenriques.github.io/knowledge-base/snippets/jackson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/jackson/</guid><description>Sane Settings # After working a while with this I want to register these sane defaults:
configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, true) configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false) FAIL_ON_NULL_FOR_PRIMITIVES # Setting FAIL_ON_NULL_FOR_PRIMITIVES forces clients to explicitely provide all values including primitives. Consider the following POJO:
data class Foo(bar: Boolean) Without the setting, a payload such as { } would render ~Foo(bar=false)~ despite the lack of default value. Given this, to guarantee consistency between the source-code and the external contract, I advise enabling this.</description></item><item><title>Scala Experiments</title><link>https://bphenriques.github.io/knowledge-base/snippets/scala_experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/snippets/scala_experiments/</guid><description>sealed class Tree[T] { def stream(): LazyList[T] = this match { case Leaf(value) =&amp;gt; LazyList(value) case Branch(left, right) =&amp;gt; left.stream() #::: right.stream() } } case class Branch[T](left: Tree[T], right: Tree[T]) extends Tree[T] case class Leaf[T](value: T) extends Tree[T] val tree = Branch( Leaf(1), Branch( Leaf(2), Leaf(3) ) ) val nextInOrder = tree.stream().dropWhile(_ != 2).drop(1).headOption println(nextInOrder)</description></item></channel></rss>
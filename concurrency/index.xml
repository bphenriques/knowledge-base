<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on Bruno Henriques</title><link>https://bphenriques.github.io/knowledge-base/concurrency/</link><description>Recent content in Concurrency on Bruno Henriques</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bphenriques.github.io/knowledge-base/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Actor Model</title><link>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/actor-model/</guid><description>In the context of Reactive Systems, Actor model is a reactive tool, a paradigm that:
Message driven - All communication between actors is done with async non-blocking messages. Abstractions provide elasticity and resiliency. Akka uses the actor model - https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html?language=scala
Fundamental # All computation occurs inside of the actor. Each actor has an address. Actors only communicate through asyncronous messages. The message driven system provides location transparency, i.</description></item><item><title>Amdah's Law</title><link>https://bphenriques.github.io/knowledge-base/concurrency/amdah_s_law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/amdah_s_law/</guid><description>Referred in:
Consistency And Availability Akka Gunther&amp;rsquo;s Universal Scalability Law In short, contention limits paralelization.
Defines the maximum improvement gaines by parallel procesing. Improvements from paralelization are limited to the code that can be paralelized. Contention limits such paralism reducing the advantages of the improvements. Does not matter as long as the contention exist.</description></item><item><title>Gunther's Universal Scalability Law</title><link>https://bphenriques.github.io/knowledge-base/concurrency/gunther_s_universal_scalability_law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bphenriques.github.io/knowledge-base/concurrency/gunther_s_universal_scalability_law/</guid><description>Referred in:
Consistency And Availability Increasing concurrency can cause negative resutrns due to contention and coherency delay.
Picks from Amdah&amp;rsquo;s Law. In addition to contention, it accounts for coeherency delay.
As the system scales up, the cost to coordinate between nodes exceeds any benefits.</description></item></channel></rss>